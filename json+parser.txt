public class JsonParser {
    public static final String AMOUNT = "amount";
    public static final String CATEGORY = "category";
    public static final String DESCRIPTION = "description";
    public static final String DATE = "date";

    public static List<Expense> fromJSON(String json) {
        try {
            return getExpensesFromJsonArray(json);
        } catch (JSONException e) {
            e.printStackTrace();
        }
        return new ArrayList<>();
    }

    @NonNull
    private static List<Expense> getExpensesFromJsonArray(String json) throws JSONException {
        JSONArray array = new JSONArray(json);
        List<Expense> results = new ArrayList<>();

        for(int i = 0; i < array.length(); i++){
            JSONObject object = array.getJSONObject(i);
            Expense expense = getExpenseFromJson(object);
            results.add(expense);
        }

        return results;
    }

    private static Expense getExpenseFromJson(JSONObject object) throws JSONException {
        Date date = DateConverter.toDate(object.getString(DATE));
        Double amount = object.getDouble(AMOUNT);
        String category = object.getString(CATEGORY);
        String description = object.getString(DESCRIPTION);
        return new Expense(date, amount, category, description);
    }
}

Callable<String> httpManager = new HttpManager(EXPENSE_URL);
            Callback<String> callbackHttpManager = getMainThreadOperation();
            asyncTaskRunner.executeAsync(httpManager, result ->{
                Toast.makeText(getApplicationContext(), result, Toast.LENGTH_SHORT).show();
                expenses.addAll(JsonParser.fromJSON(result));

                if(currentFragment instanceof HomeFragment){
                    ((HomeFragment)currentFragment).notifyAdapter();
                }
            });